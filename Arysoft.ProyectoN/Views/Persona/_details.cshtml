@model Arysoft.ProyectoN.Models.PersonaEditViewModel

@{ 

    var userClassColor = string.Empty;
    string verificadaClassColor = "text-muted";
    string verificadaTitleText = "Información no verificada";

    switch (Model.Afinidad)
    {
        case AfinidadTipo.Movilizador:
        case AfinidadTipo.Simpatizante:
            userClassColor = "text-warning";
            break;
        case AfinidadTipo.PorAfiliado:
            userClassColor = "text-info";
            break;
        case AfinidadTipo.PorSector:
            userClassColor = "text-primary";
            break;        
        default:
            userClassColor = "text-muted";
            break;
    }

    if (Model.Verificada == BoolTipo.Si)
    {
        verificadaClassColor = "text-primary";
        verificadaTitleText = "Información verificada";
    }

}

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title">
        Persona <small>DETALLES</small>
    </h4>
</div>

<div class="modal-body">

    <div class="row">
        <div class="col-md-8">
            <h4 style="margin-top: 0;">
                <span class="glyphicon glyphicon-ok-sign @verificadaClassColor" title="@verificadaTitleText"></span>
                <span class="glyphicon glyphicon-user @userClassColor" title="@Model.Afinidad.GetDisplayName()" ></span>
                @Html.DisplayFor(model => model.NombreCompleto)
                <small class="text-warning">SECCION @Model.Seccion.Numero</small>
            </h4>

            <dl class="dl-horizontal">

                    @if (Model.Afinidad == AfinidadTipo.PorSector || Model.Afinidad == AfinidadTipo.PorAfiliado)
                    {
                        <dt>
                            Promotor
                        </dt>
                        <dd>
                            @if (Model.Promotor != null)
                            {
                                <span class="text-primary" style="cursor: pointer" onclick="getPersonaDetails('@Model.PersonaPromotorID')">@Model.Promotor.NombreCompleto</span>
                            }
                        </dd>
                    }
                    else if (Model.Afinidad == AfinidadTipo.Movilizador || Model.Afinidad == AfinidadTipo.Simpatizante)
                    {
                        <dt>
                            Sector
                        </dt>
                        <dd>
                            @if (Model.Sector != null)
                            {
                                <span>@Model.Sector.Nombre @Html.Raw(Model.EsResponsableSector ? " - <span class='text-primary'>RESPONSABLE DEL SECTOR</span>" : "")</span>
                            }
                        </dd>                        
                    }

                    <dt>
                        Contacto
                    </dt>

                    <dd>
                        @if (!string.IsNullOrEmpty(Model.Telefono))
                        {
                            <span class="glyphicon glyphicon-phone-alt glyphicon-table-info-size"></span>
                            @Html.DisplayFor(model => model.Telefono)
                        }
                        @if (!string.IsNullOrEmpty(Model.Celular))
                        {
                            <span class="glyphicon glyphicon-phone glyphicon-table-info-size"></span>
                            @Html.DisplayFor(model => model.Celular)
                        }
                        @if (!string.IsNullOrEmpty(Model.CorreoElectronico))
                        {
                            <span class="glyphicon glyphicon-envelope glyphicon-table-info-size"></span>
                            @Html.DisplayFor(model => model.CorreoElectronico)
                        }
                    </dd>

                    <dt>Ubicación</dt>
                    <dd>
                        <span class="glyphicon glyphicon-home glyphicon-table-info-size"></span>
                        <span>
                            @if (Model.UbicacionVive.Calle != null)
                            {<span>@Model.UbicacionVive.Calle.Nombre</span>}
                            @Model.UbicacionVive.NumExterior
                            @if (!string.IsNullOrEmpty(Model.UbicacionVive.Letra))
                            {<span>@Model.UbicacionVive.Letra</span>}
                            @if (!string.IsNullOrEmpty(Model.UbicacionVive.NumInterior))
                            {<span>@Model.UbicacionVive.NumInterior</span>}
                            @if (Model.UbicacionVive.Colonia != null)
                            {
                                @Model.UbicacionVive.Colonia.Nombre
                                <span>C.P.</span> @Model.UbicacionVive.Colonia.CodigoPostal
                            }
                            @if (!string.IsNullOrEmpty(Model.UbicacionVive.Descripcion))
                            {<br /><span class="text-muted">@Model.UbicacionVive.Descripcion</span>}
                        </span>
                        @if (Model.VotaEnDomicilio == BoolTipo.No)
                        {
                            <br />
                            <span class="text-warning" title="Domicilio donde vota">
                                <span class="glyphicon glyphicon-erase glyphicon-table-info-size"></span>
                                @if (Model.UbicacionVota != null)
                                {
                                    <span>
                                        @if (Model.UbicacionVota.Calle != null)
                                        {<span>@Model.UbicacionVota.Calle.Nombre</span>}
                                        @Model.UbicacionVota.NumExterior
                                        @if (!string.IsNullOrEmpty(Model.UbicacionVota.Letra))
                                        {<span>item.UbicacionVota.Letra</span>}
                                        @if (!string.IsNullOrEmpty(Model.UbicacionVota.NumInterior))
                                        {<span>item.UbicacionVota.NumInterior</span>}
                                        @if (Model.UbicacionVota.Colonia != null)
                                        {
                                            @Model.UbicacionVota.Colonia.Nombre
                                            <span>C.P.</span> @Model.UbicacionVota.Colonia.CodigoPostal
                                        }
                                        @if (!string.IsNullOrEmpty(Model.UbicacionVota.Descripcion))
                                        {<br /><span class="text-muted">@Model.UbicacionVota.Descripcion</span>}
                                    </span>
                                }
                            </span>
                        }
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Status)
                    </dt>

                    <dd>
                        @switch (Model.Status)
                        {
                            case StatusTipo.Activo:
                                <span class="label label-primary">
                                    @Html.DisplayFor(model => model.Status)
                                </span>
                                break;
                            case StatusTipo.Baja:
                                <span class="label label-warning">
                                    @Html.DisplayFor(model => model.Status)
                                </span>
                                break;
                            case StatusTipo.Eliminado:
                                <span class="label label-danger">
                                    @Html.DisplayFor(model => model.Status)
                                </span>
                            break;
                        }                        
                    </dd>
                <dt>Registro</dt>
                <dd>@Html.DisplayFor(model => model.FechaAlta)</dd>

                </dl>

        </div>
        <div class="col-md-4">
            @if (Model.VotanteSeguro == BoolTipo.Si)
            {
                <div class="alert alert-success text-center">
                    <span class="glyphicon glyphicon-erase" ></span>
                    VOTANTE SEGURO
                </div>
            }
            else
            {
                <div class="alert alert-danger text-center">
                    <span class="glyphicon glyphicon-remove"></span>
                    VOTO NO SEGURO
                </div>
            }

        <div class="row">
            <div class="col-md-6">
                @if (Model.TieneBarda == BoolTipo.Si)
{
                    <div class="alert alert-info text-center">
                        <span class="glyphicon glyphicon-ok"></span>
                        TIENE BARDA
                    </div>
                }
            </div>
            <div class="col-md-6">
                @if (Model.TieneLona == BoolTipo.Si)
{
                <div class="alert alert-info text-center">
                    <span class="glyphicon glyphicon-ok"></span>
                    TIENE LONA
                </div>
                }
            </div>
        </div>
        </div>
    </div>

    

    <ul class="nav nav-tabs">
        @if (Model.Afinidad == AfinidadTipo.Movilizador || Model.Afinidad == AfinidadTipo.Simpatizante)
        {
        <li class="active">
            <a href="#afines" data-toggle="tab">
                <span class="glyphicon glyphicon-user"></span>
                Personas afines
                @if (Model.PersonasAfines != null)
                {
                <span class="badge">@Html.DisplayFor(model => model.PersonasAfines.Count)</span>
                }
            </a>
        </li>
        }
        <li class="@((Model.Afinidad != AfinidadTipo.Movilizador && Model.Afinidad != AfinidadTipo.Simpatizante ) ? "active" : "")">
            <a href="#notas" data-toggle="tab">
                <span class="glyphicon glyphicon-comment"></span>
                Notas
                <span class="badge">@Html.DisplayFor(model => model.Notas.Count)</span>
            </a>
        </li>

        <li>
            <a href="#auditorias" data-toggle="tab">
                <span class="glyphicon glyphicon-eye-open"></span>
                Auditorias
                <span class="badge">@Html.DisplayFor(model => model.AuditoriasRealizadas.Count)</span>
            </a>
        </li>

    </ul>

    <div class="tab-content">
        @if (Model.Afinidad == AfinidadTipo.Movilizador || Model.Afinidad == AfinidadTipo.Simpatizante)
{
        <div class="tab-pane fade in active" name="afines" id="afines">
            <h4>Personas afines <small>Invitadas por esta persona</small></h4>

            <div id="listaPersonasAfines" name="listaPersonasAfines" style="max-height: 400px; overflow-y: scroll;">
                @Html.Partial("_listaPersonas", Model)
            </div>
        </div>
}

        <div class="tab-pane fade in @((Model.Afinidad != AfinidadTipo.Movilizador && Model.Afinidad != AfinidadTipo.Simpatizante) ? "active" : "")" name="notas" id="notas">
            <h4>Notas</h4>

            <div id="listaNotas" name="listaNotas" style="max-height: 400px; overflow-y: scroll;">
                @Html.Partial("_listaNotas", Model.Notas)
            </div>
        </div>

        <div class="tab-pane fade in" name="auditorias" id="auditorias">
            <h4>Auditorias</h4>

            <div id="listaAuditorias" name="listaAuditorias" style="max-height: 400px; overflow-y: scroll;">
                @Html.Partial("_listaAuditorias", Model)
            </div>
        </div>

    </div>
</div>

<div class="modal-footer">
    <div class="row">
        <div class="col-md-8 text-left text-muted">
            <small>
                <strong>Actualizado por</strong> @Model.UserNameActualizacion |
                <strong>Última actualización</strong> @Model.FechaActualizacion.ToShortDateString()
            </small>
        </div>
        <div class="col-md-4 text-right">
            <button type="button" class="btn btn-default" data-dismiss="modal">
                <span class="glyphicon glyphicon-remove"></span>
                Cancelar
            </button>

            @if(User.IsInRole("Admin") || User.IsInRole("Editor"))
            { 
                switch(Model.Status)
                {
                    case StatusTipo.Activo:
                        @Html.Raw(
                            @Html.ActionLink("Editar", "Edit", new { id = Model.PersonaID }, new { @class = "btn btn-primary" }).ToHtmlString()
                                .Replace("Editar", "<span class='glyphicon glyphicon-edit' title='Editar'></span> Editar")
                        )
                        break;
                    case StatusTipo.Baja:
                        @Html.Raw(
                            @Html.ActionLink("[activar]", "Activar", new { id = Model.PersonaID }, new { @class = "btn btn-success" }).ToHtmlString()
                                .Replace("[activar]", "<span class='glyphicon glyphicon-ok' title='Reactivar persona'></span> Reactivar")
                        )
                        break;
                }
            }
        </div>
    </div>

</div>
