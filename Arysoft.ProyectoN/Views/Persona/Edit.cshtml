@model Arysoft.ProyectoN.Models.PersonaEditViewModel

@{
    bool esNuevo = Model.Status == StatusTipo.Ninguno;
    bool votaDomicilioShowPanel = Model.VotaEnDomicilio == BoolTipo.Si;
    bool tieneSeccion = Model.SeccionID != Guid.Empty;
    string sectorShowFormGroup = "style='display: none;'";
    string promotorShowFormGroup = string.Empty; // "style='display: none;'";
    string classCasilla = "style='display: none;'";
    string sectorDisabled = string.Empty;

    string titleSmall = "EDITAR";
    string panelClass = "panel panel-default";
    string panelTitle = Model.Status.ToString();

    if (esNuevo)
    {
        ViewBag.Title = "Nueva Persona";
        titleSmall = "NUEVA";
        panelClass = "panel panel-primary";
        panelTitle = "Nuevo registro";
    }
    else
    {
        ViewBag.Title = "Editar Persona";
    }

    if (Model.Afinidad == AfinidadTipo.Movilizador || Model.Afinidad == AfinidadTipo.Simpatizante)
    {
        sectorShowFormGroup = string.Empty;
        //promotorShowFormGroup = string.Empty; // Para que se muestre un promotor todo el tiempo
    }
    else if (Model.Afinidad == AfinidadTipo.PorSector || Model.Afinidad == AfinidadTipo.PorAfiliado)
    {
        promotorShowFormGroup = string.Empty;
    }

    switch (Model.Status)
    {
        case StatusTipo.Activo:
            panelClass = "panel panel-success";
            panelTitle = "Editar registro";
            break;
        case StatusTipo.Baja:
            panelClass = "panel panel-warning";
            panelTitle = "Registro dado de baja";
            break;
        case StatusTipo.Eliminado:
            panelClass = "panel panel-danger";
            panelTitle = "Registro eliminado";
            break;
    }

    if (tieneSeccion) { classCasilla = ""; }

    if (User.IsInRole("SectorEditor"))
    {
        sectorDisabled = "disabled";
    }
}

@section styles {
    <link href="~/Content/bootstrap-chosen.css" rel="stylesheet" />
}

<div id="notaModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title"><span class="glyphicon glyphicon-comment"></span> Notas</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label for="notaTexto" class="control-label col-md-3 text-primary">Escribe una nota</label>
                        <div class="col-md-9">
                            <textarea class="form-control" id="notaTexto" name="notaTexto" rows="5"
                                      placeholder="Escribe la anotación para anexarla a la persona"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    <span class="glyphicon glyphicon-remove"></span>
                    Cancelar
                </button>
                <button id="agregarNota" type="button" class="btn btn-primary">
                    <span class="glyphicon glyphicon-plus"></span>
                    Agregar
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div id="detailsModal" class="modal fade" tabindex="-1" role="dialog" style="display: none;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="detalles-modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Detalles</h4>
            </div>
            <div id="detalles-modal-body"></div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>Persona <small>@titleSmall</small></h2>
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="@panelClass">
                    <div class="panel-heading">
                        @Html.Raw(panelTitle)
                    </div>
                    <div class="panel-body">
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.PersonaID)
                            @Html.HiddenFor(model => model.CasillaID)
                            @Html.HiddenFor(model => model.VotaEnDomicilio)
                            @Html.HiddenFor(model => model.VotanteSeguro)
                            @Html.HiddenFor(model => model.TieneBarda)
                            @Html.HiddenFor(model => model.TieneLona)
                            @Html.HiddenFor(model => model.RepresentanteTipo)
                            @Html.HiddenFor(model => model.RepresentanteAsistencia)
                            @Html.HiddenFor(model => model.RepresentanteCapacitacion)
                            @Html.HiddenFor(model => model.FechaAlta)
                            @Html.HiddenFor(model => model.Verificada)
                            @Html.HiddenFor(model => model.Status)
                            @Html.HiddenFor(model => model.UserNameActualizacion)
                            @Html.HiddenFor(model => model.FechaActualizacion)
                            <fieldset>
                                <legend>Datos personales</legend>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Nombres, htmlAttributes: new { @class = "control-label col-md-2 text-primary" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Nombres, new { htmlAttributes = new { @class = "form-control toUpperCase" } })
                                        @Html.ValidationMessageFor(model => model.Nombres, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.ApellidoPaterno, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.ApellidoPaterno, new { htmlAttributes = new { @class = "form-control toUpperCase" } })
                                        @Html.ValidationMessageFor(model => model.ApellidoPaterno, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.ApellidoMaterno, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.ApellidoMaterno, new { htmlAttributes = new { @class = "form-control toUpperCase" } })
                                        @Html.ValidationMessageFor(model => model.ApellidoMaterno, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-offset-2 col-md-10" id="resultadosPersonas" style="display: none;">
                                        <span id="nombreResult"></span>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.FechaNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.FechaNacimiento, new { htmlAttributes = new { @class = "form-control datepicker", @placeholder = "dd/mm/aaaa" } })
                                        @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.Sexo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EnumDropDownListFor(model => model.Sexo, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Sexo, "", new { @class = "text-danger" })
                                    </div>
                                    @*@Html.LabelFor(model => model.EstadoCivil, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EnumDropDownListFor(model => model.EstadoCivil, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.EstadoCivil, "", new { @class = "text-danger" })
                                    </div>
                                    @Html.LabelFor(model => model.Ocupacion, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Ocupacion, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Ocupacion, "", new { @class = "text-danger" })
                                    </div>*@
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control", @placeholder = "1234567890|123-456-7890|123 456 7890|000.000.0000" } })
                                        @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.Celular, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control" } })
                                            <span class="input-group-addon">
                                                <input type="checkbox" title="Whatsapp" />
                                            </span>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.CorreoElectronico, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.CorreoElectronico, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CorreoElectronico, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset>
                                <legend>Domicilio</legend>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CalleID, "Calle", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.DropDownList("CalleID", null, htmlAttributes: new { @class = "chosen-select" })
                                        @Html.ValidationMessageFor(model => model.CalleID, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.LabelFor(model => model.NumExterior, htmlAttributes: new { @class = "control-label col-md-1" })
                                    <div class="col-md-1">
                                        @Html.EditorFor(model => model.NumExterior, new { htmlAttributes = new { @class = "form-control text-right" } })
                                    </div>

                                    @Html.LabelFor(model => model.Letra, htmlAttributes: new { @class = "control-label col-md-1" })
                                    <div class="col-md-1">
                                        @Html.EditorFor(model => model.Letra, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>

                                    @Html.LabelFor(model => model.NumInterior, htmlAttributes: new { @class = "control-label col-md-1" })
                                    <div class="col-md-1">
                                        @Html.EditorFor(model => model.NumInterior, new { htmlAttributes = new { @class = "form-control text-right" } })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ColoniaID, "Colonia", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("ColoniaID", null, htmlAttributes: new { @class = "chosen-select" })
                                        @Html.ValidationMessageFor(model => model.ColoniaID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model.Descripcion, 3, 0, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-2">Vota donde mismo</label>
                                    <div class="col-md-10">
                                        @if (votaDomicilioShowPanel)
                                        {
                                            <input type="checkbox" value="SI" id="votaDomicilio" name="votaDomicilio" data-reverse checked />
                                        }
                                        else
                                        {
                                            <input type="checkbox" value="SI" id="votaDomicilio" name="votaDomicilio" data-reverse />
                                        }
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div id="DomicilioVotaPanel" class="well" @Html.Raw(votaDomicilioShowPanel ? "style='display: none;'" : "")>
                                            <div class="form-group">
                                                <div class="col-md-offset-2 col-md-10">
                                                    <h4>Domicilio donde vota</h4>
                                                </div>

                                                @Html.LabelFor(model => model.VotaCalleID, "Calle", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-4">
                                                    @Html.DropDownList("VotaCalleID", null, htmlAttributes: new { @class = "chosen-select" })
                                                    @Html.ValidationMessageFor(model => model.VotaCalleID, "", new { @class = "text-danger" })
                                                </div>

                                                @Html.LabelFor(model => model.VotaNumExterior, htmlAttributes: new { @class = "control-label col-md-1" })
                                                <div class="col-md-1">
                                                    @Html.EditorFor(model => model.VotaNumExterior, new { htmlAttributes = new { @class = "form-control text-right" } })
                                                </div>

                                                @Html.LabelFor(model => model.VotaLetra, htmlAttributes: new { @class = "control-label col-md-1" })
                                                <div class="col-md-1">
                                                    @Html.EditorFor(model => model.VotaLetra, new { htmlAttributes = new { @class = "form-control" } })
                                                </div>

                                                @Html.LabelFor(model => model.VotaNumInterior, htmlAttributes: new { @class = "control-label col-md-1" })
                                                <div class="col-md-1">
                                                    @Html.EditorFor(model => model.VotaNumInterior, new { htmlAttributes = new { @class = "form-control text-right" } })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.VotaColoniaID, "Colonia", htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-10">
                                                    @Html.DropDownList("VotaColoniaID", null, htmlAttributes: new { @class = "chosen-select" })
                                                    @Html.ValidationMessageFor(model => model.VotaColoniaID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.VotaDescripcion, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-10">
                                                    @Html.TextAreaFor(model => model.VotaDescripcion, 3, 0, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.VotaDescripcion, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset>
                                <legend>Características</legend>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Afinidad, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EnumDropDownListFor(model => model.Afinidad, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Afinidad, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <!-- Si es afiliado -->
                                <div class="form-group" id="SectorFormGroup" @Html.Raw(sectorShowFormGroup)>
                                    @Html.LabelFor(model => model.SectorBrigadaID, "Apoya al sector", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @if (sectorDisabled == "disabled")
                                        {   
                                            @Html.HiddenFor(model => model.SectorBrigadaID)
                                            <span class="help-block text-muted" style="padding-top: 4px;">@Html.Raw(ViewBag.SectorBrigadaNombre)</span>
                                        }
                                        else
                                        {
                                            @Html.DropDownList("SectorBrigadaID", null, htmlAttributes: new { @class = "form-control" })
                                        }
                                        @Html.ValidationMessageFor(model => model.SectorBrigadaID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <!-- Si es por sector o 1x10 -->
                                <div class="form-group" id="PromotorFormGroup" @Html.Raw(promotorShowFormGroup)>
                                    @Html.LabelFor(model => model.PersonaPromotorID, "Movilizador", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("PersonaPromotorID", null, htmlAttributes: new { @class = "chosen-select" })
                                        @Html.ValidationMessageFor(model => model.PersonaPromotorID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.SeccionID, "Sección donde vota", htmlAttributes: new { @class = "control-label col-md-2 text-primary" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("SeccionID", null, htmlAttributes: new { @class = "chosen-select" })
                                        @Html.ValidationMessageFor(model => model.SeccionID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.VotanteSeguro, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @if (Model.VotanteSeguro == BoolTipo.Si)
                                        {
                                            <input type="checkbox" value="SI" id="votanteSeguroCheckbox" name="votanteSeguroCheckbox" data-reverse checked />
                                        }
                                        else
                                        {
                                            <input type="checkbox" value="SI" id="votanteSeguroCheckbox" name="votanteSeguroCheckbox" data-reverse />
                                        }
                                    </div>

                                    @Html.LabelFor(model => model.TieneBarda, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @if (Model.TieneBarda == BoolTipo.Si)
                                        {
                                            <input type="checkbox" value="SI" id="tieneBardaCheckbox" name="tieneBardaCheckbox" data-reverse checked />
                                        }
                                        else
                                        {
                                            <input type="checkbox" value="SI" id="tieneBardaCheckbox" name="tieneBardaCheckbox" data-reverse />
                                        }
                                    </div>

                                    @Html.LabelFor(model => model.TieneLona, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-2">
                                        @if (Model.TieneLona == BoolTipo.Si)
                                        {
                                            <input type="checkbox" value="SI" id="tieneLonaCheckbox" name="tieneLonaCheckbox" data-reverse checked />
                                        }
                                        else
                                        {
                                            <input type="checkbox" value="SI" id="tieneLonaCheckbox" name="tieneLonaCheckbox" data-reverse />
                                        }
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-offset-2 col-md-10">
                                        <div class="well" id="notaCheckboxPanel" style="display: none;">
                                            <div class="form-group">
                                                <label for="notaCheckbox" class="control-label col-md-2">Incluir nota</label>
                                                <div class="col-md-10">
                                                    <textarea id="notaCheckbox" name="notaCheckbox" class="form-control" placeholder="Incluir nota por el cambio"></textarea>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    </div>
                    <div class="panel-footer">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-md-4">
                                    <strong>@Html.DisplayNameFor(model => model.FechaAlta)</strong>
                                    @Html.DisplayFor(model => model.FechaAlta)
                                    <br />
                                    <strong>@Html.DisplayNameFor(model => model.UserNameActualizacion)</strong>
                                    @Html.DisplayFor(model => model.UserNameActualizacion)
                                    <br />
                                    <strong>@Html.DisplayNameFor(model => model.FechaActualizacion)</strong>
                                    @Html.DisplayFor(model => model.FechaActualizacion)
                                </div>
                                <div class="col-md-8 text-right">
                                    <label class="control-label">Información verificada</label>
                                    @if (Model.Verificada == BoolTipo.Si)
                                    {
                                        <input type="checkbox" value="SI" id="verificadaCheckbox" name="verificadaCheckbox" data-reverse checked data-off-class="btn-warning" data-on-class="btn-primary" />
                                    }
                                    else
                                    {
                                        <input type="checkbox" value="SI" id="verificadaCheckbox" name="verificadaCheckbox" data-reverse data-off-class="btn-warning" data-on-class="btn-primary" />
                                    }
                                    @Html.Raw(
                                        @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default", @style = "margin-left: 10px;" }).ToHtmlString()
                                            .Replace("Cancelar", "<span class='glyphicon glyphicon-remove' title='Cancelar cambios'></span> Cancelar")
                                    )
                                    <button type="submit" name="submitButton" class="btn btn-primary" value="save">
                                        <span class="glyphicon glyphicon-floppy-disk"></span>
                                        Guardar
                                    </button>

                                    <button type="submit" name="submitButton" class="btn btn-success" value="save-new">
                                        <span class="glyphicon glyphicon-floppy-open"></span>
                                        Guardar y nuevo
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            }
        </div>
    </div>
    

    <ul class="nav nav-tabs">
        <li class="active">
            <a href="#afines" data-toggle="tab">
                <span class="glyphicon glyphicon-user"></span>
                Personas afines
                <span class="badge">@Html.DisplayFor(model => model.PersonasAfines.Count)</span>
            </a>
        </li>

        <li>
            <a href="#auditorias" data-toggle="tab">
                <span class="glyphicon glyphicon-eye-open"></span>
                Auditorias
                <span class="badge">@Html.DisplayFor(model => model.AuditoriasRealizadas.Count)</span>
            </a>
        </li>

        <li>
            <a href="#notas" data-toggle="tab">
                <span class="glyphicon glyphicon-comment"></span>
                Notas
                <span class="badge">@Html.DisplayFor(model => model.Notas.Count)</span>
            </a>
        </li>
    </ul>

    <div class="tab-content">
        <div class="tab-pane fade in active" name="afines" id="afines">
            <h4>Personas afines <small>Invitadas por esta persona</small></h4>

            <div id="listaPersonasAfines" name="listaPersonasAfines">
                @Html.Partial("_listaPersonas", Model)
            </div>
        </div>

        <div class="tab-pane fade in" name="auditorias" id="auditorias">
            <h4>Auditorias</h4>

            <div id="listaAuditorias" name="listaAuditorias">
                @Html.Partial("_listaAuditorias", Model)
            </div>
        </div>

        <div class="tab-pane fade in" name="notas" id="notas">
            <h4>Notas</h4>

            <button type="button" id="notaModalButton" name="notaModalButton"
                    class="btn btn-default" data-toggle="modal" data-target="#notaModal" title="Agregar nota">
                <span class="glyphicon glyphicon-plus"></span>
                Agregar nota
            </button>

            <div id="listaNotas" name="listaNotas" style="margin-top: 10px;">
                @Html.Partial("_listaNotas", Model.Notas)
            </div>
        </div>
    </div>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/chosen.jquery.min.js"></script>
    <script src="~/Scripts/bootstrap-checkbox.js"></script>
    <script src="~/Scripts/bootstrap-datepicker.js"></script>

    <script>

        var cambioVotante = false;
        var cambioBarda = false;
        var cambioLona = false;
        var estanTodasLasSecciones = @(Model.Afinidad == AfinidadTipo.PorSector || Model.Afinidad == AfinidadTipo.Ninguno ? "false" : "true" ); // Validar si desde el principio solo tiene las secciones del sector

        $(document).ready(function () {

            $('.chosen-select').chosen();

            $('.datepicker').datepicker({
                format: "dd/mm/yyyy",
                weekStart: 0,
                todayBtn: "linked",
                language: "es",
                autoclose: true
            });

            // https://www.jqueryscript.net/form/jQuery-Toggle-Button-Plugin-For-Bootstrap-Bootstrap-Checkbox.html
            $('#votaDomicilio, #votanteSeguroCheckbox, #tieneBardaCheckbox, #tieneLonaCheckbox, #YaVoto').checkboxpicker({
                offLabel: 'no',
                onLabel: 'si'
            });

            $('#verificadaCheckbox').checkboxpicker({
                style: false,
                offClass: 'btn-warning',
                onClass: 'btn-info',
                offLabel: 'no',
                onLabel: 'si'
            });

            $(".toUpperCase").keyup(function () {
                this.value = this.value.toLocaleUpperCase();
            });

            var url_buscarSimilares = '@Url.Action("BuscarSimilares", "Persona")';
            // Busca si existe una persona con ese nombre
            $('#Nombres, #ApellidoPaterno, #ApellidoMaterno').on('keyup', function () {
                var inputName = $(this).attr('name');
                var nombres = $('#Nombres').val();
                var aPaterno = $('#ApellidoPaterno').val();
                var aMaterno = $('#ApellidoMaterno').val();

                if (nombres.length >= 3 && (aPaterno.length >= 3 || aMaterno.length >= 3)) {

                    $.ajax({
                        cache: false,
                        async: true,
                        type: 'get',
                        url: url_buscarSimilares,
                        data: {
                            nombres: nombres,
                            apellidoPaterno: aPaterno,
                            apellidoMaterno: aMaterno
                        },
                        success: function (vista) {

                            if (vista.message == null) {
                                $('#resultadosPersonas').removeAttr('style');
                                $('#nombreResult').html(vista);
                            }
                            else {
                                $('#resultadosPersonas').attr('style', 'display: none;');
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('A ocurrido una excepción, error: ' + error); //TODO: Borrar esto despues
                            $('#resultadosPersonas').attr('style', 'display: none;');
                        }
                    });
                }
                else {
                    $('#resultadosPersonas').attr('style', 'display: none;');
                }
            });

            @*// Al seleccionar una Sección, muestra las casillas existentes y
            // permite guardar el número INE del ciudadano
            $('#SeccionID').on('change', function () {

                if ($(this).val() == '00000000-0000-0000-0000-000000000000') {
                    $('#CasillaDIV').attr('style', 'display: none');
                    // Limpiar los campos INE y Voto
                }
                else {
                    var url = '@Url.Action("BuscarCasillasXSeccion", "Casilla")/' + $(this).val();

                    $.ajax({
                        cache: false,
                        async: true,
                        type: 'get',
                        url: url,
                        data: {},
                        success: function (datos) {

                            if (datos.message == null || datos.message == undefined) {

                                $('#CasillaVotaID').empty();
                                $('#CasillaVotaID').append('<option value="00000000-0000-0000-0000-000000000000">(casilla)</option>');

                                $.each(datos.Casillas, function (index, item) {
                                    var tipo = ObtenerNombreCasillaTipo(item.Tipo);
                                    var opcion = $('<option>', { value: item.ID }).text(tipo);

                                    $('#CasillaVotaID').append(opcion);
                                });

                                $('#CasillaDIV').removeAttr('style');
                            }
                            else {
                                if (datos.message == 'notid') {
                                    alert('Se perdió el identificador de la sección');
                                }
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('A ocurrido una excepción, error: ' + error);
                        }
                    });

                }
            });*@

            $('#votaDomicilio').on('change', function () {

                if ($(this).is(':checked')) {
                    $('#VotaEnDomicilio').val('@BoolTipo.Si');
                    $('#DomicilioVotaPanel').attr('style', 'display: none;');
                }
                else {
                    $('#VotaEnDomicilio').val('@BoolTipo.No');
                    $('#DomicilioVotaPanel').removeAttr('style');
                    $('#VotaColoniaID').chosen('destroy').chosen();
                    $('#VotaCalleID').chosen('destroy').chosen();
                }
            });

            $('#Afinidad').on('change', function () {
                var porSector = 'True' == '@User.IsInRole("SectorEditor")';
                var obtenerSecciones = false;
                var afinidadSelecionada = true;
                

                switch ($(this).val()) {
                    case '@((int)AfinidadTipo.Movilizador)':
                    case '@((int)AfinidadTipo.Simpatizante)':
                        $('#SectorFormGroup').removeAttr('style');
                        // $('#PromotorFormGroup').attr('style', 'display: none;');
                        break;
                    case '@((int)AfinidadTipo.PorSector)':
                    case '@((int)AfinidadTipo.PorAfiliado)':
                        $('#SectorFormGroup').attr('style', 'display: none;');
                        //$('#PromotorFormGroup').removeAttr('style');
                        //$('#PersonaPromotorID').chosen('destroy').chosen();
                        break;
                    default:
                        $('#SectorFormGroup').attr('style', 'display: none;');
                        //$('#PromotorFormGroup').attr('style', 'display: none;');                        
                        if (porSector) {
                            $('#SeccionID').empty();
                            $('#SeccionID').append('<option value="00000000-0000-0000-0000-000000000000">(primero seleccione la Afinidad)</option>');
                            $('#SeccionID').chosen('destroy').chosen();
                            afinidadSelecionada = false;
                        }
                        break;
                }

                // Actualizar las secciones, según el permiso de SectorEditor y si va a registrar una persona Por Sector

                if (porSector) {
                    var esPorSector = true;

                    if ($(this).val() == '@((int)AfinidadTipo.PorSector)') {
                        //alert('filtrar solo por sector');
                        estanTodasLasSecciones = false;
                        obtenerSecciones = true;
                        esPorSector = true;
                    }
                    else if (!estanTodasLasSecciones && afinidadSelecionada) {
                        //alert('mostrar todas las secciones');
                        estanTodasLasSecciones = true;
                        obtenerSecciones = true;
                        esPorSector = false;
                    }
                    //else {
                    //    alert('No tienes el perimso, no va a cambiar nunca nada.');
                    //}

                    if (obtenerSecciones) {
                        var url = '@Url.Action("ObtenerSeccionesVota", "Persona")';

                        $.ajax({
                            cache: false,
                            async: true,
                            type: 'get',
                            url: url,
                            data: {
                                esPorSector: esPorSector ? '1' : '0'
                            },
                            success: function (datos) {
                                if (datos.message == null || datos.message == undefined) {
                                    $('#SeccionID').empty();
                                    $('#SeccionID').append('<option value="00000000-0000-0000-0000-000000000000">(sección)</option>');
                                    $.each(datos.Secciones, function (index, item) {
                                        var opcion = $('<option>', { value: item.Id }).text(item.Nombre);
                                        $('#SeccionID').append(opcion);
                                    });
                                    $('#SeccionID')
                                        .chosen('destroy')
                                        .chosen();
                                }
                                //else {
                                //    if (datos.message == 'notid') {
                                //        alert('Se perdió el identificador de la sección');
                                //    }
                                //}
                            },
                            error: function (xhr, status, error) {
                                alert('A ocurrido una excepción, error: ' + error);
                            }
                        });
                    }
                } // porSector
            }); // Afinidad.Change

            $('#votanteSeguroCheckbox').on('change', function () {

                if ($(this).is(':checked')) {
                    $('#VotanteSeguro').val('@BoolTipo.Si');
                    $('#notaCheckbox').val($('#notaCheckbox').val().replace('[NO ES VOTANTE SEGURO]', ''));
                    cambioVotante = false;
                    if (!cambioVotante && !cambioBarda && !cambioLona) {
                        $('#notaCheckboxPanel').attr('style', 'display: none;');
                        $('#notaCheckbox').val('');
                    }
                }
                else {
                    $('#VotanteSeguro').val('@BoolTipo.No');
                    $('#notaCheckboxPanel').removeAttr('style');
                    $('#notaCheckbox').focus();
                    if (!$('#notaCheckbox').val().includes('[NO ES VOTANTE SEGURO]')) {
                        $('#notaCheckbox').val('[NO ES VOTANTE SEGURO]' + $('#notaCheckbox').val());
                    }
                    cambioVotante = true;
                }
            });

            $('#tieneBardaCheckbox').on('change', function () {

                if ($(this).is(':checked')) {
                    $('#TieneBarda').val('@BoolTipo.Si');
                    $('#notaCheckboxPanel').removeAttr('style');
                    $('#notaCheckbox').focus();
                    if (!$('#notaCheckbox').val().includes('[TIENE BARDA]')) {
                        $('#notaCheckbox').val('[TIENE BARDA]' + $('#notaCheckbox').val());
                    }
                    cambioBarda = true;
                }
                else {
                    $('#TieneBarda').val('@BoolTipo.No');
                    $('#notaCheckbox').val($('#notaCheckbox').val().replace('[TIENE BARDA]', ''));
                    cambioBarda = false;
                    if (!cambioVotante && !cambioBarda && !cambioLona) {
                        $('#notaCheckboxPanel').attr('style', 'display: none;');
                        $('#notaCheckbox').val('');
                    }
                }
            });

            $('#verificadaCheckbox').on('change', function () {

                if ($(this).is(':checked')) {
                    $('#Verificada').val('@BoolTipo.Si');
                }
                else {
                    $('#Verificada').val('@BoolTipo.No');
                }
            }); // VerificadaCheckbox.Change


            $('#tieneLonaCheckbox').on('change', function () {

                if ($(this).is(':checked')) {
                    $('#TieneLona').val('@BoolTipo.Si');
                    $('#notaCheckboxPanel').removeAttr('style');

                    $('#notaCheckbox').focus();
                    if (!$('#notaCheckbox').val().includes('[TIENE LONA]')) {
                        $('#notaCheckbox').val('[TIENE LONA]' + $('#notaCheckbox').val());
                    }
                    cambioLona = true;
                }
                else {
                    $('#TieneLona').val('@BoolTipo.No');
                    $('#notaCheckbox').val($('#notaCheckbox').val().replace('[TIENE LONA]', ''));
                    cambioLona = false;
                    if (!cambioVotante && !cambioBarda && !cambioLona) {
                        $('#notaCheckboxPanel').attr('style', 'display: none;');
                        $('#notaCheckbox').val('');
                    }
                }
            });

            // NOTAS

            $('#notaModal').on('shown.bs.modal', function () {
                $('#notaTexto').focus();
            });

            $('#agregarNota').on('click', function () {
                var texto = $('#notaTexto').val();
                var id = $('#PersonaID').val();

                if (texto.length == 0) {
                    alert('No se ha especificado la nota.');
                    $('#notaTexto').focus();
                }
                else {
                    var url = '@Url.Action("AgregarNota", "Persona")';
                    var tipo = '@PropietarioTipo.Persona';

                    $.ajax({
                        cache: false,
                        async: true,
                        type: 'post',
                        url: url,
                        data: {
                            id: id,
                            texto: texto,
                            tipo: tipo
                        },
                        success: function (view) {
                            if (view.message != null) {
                                alert(view.message);
                            }
                            else {
                                $('#notaTexto').val('');
                                $('#listaNotas').html(view);
                                $('#notaModal').modal('hide');
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('A ocurrido una excepción: ' + status + '\n error: ' + error);
                        }
                    });
                }
            });

        }); // document.ready

    var personaDetailsModalOriginalContent = $('#detalles-modal-content').html();

    function getPersonaDetails(id) {
        var url = '@Url.Action("Details", "Persona")/' + id;

        $('#detailsModal').modal('show');

            $.ajax({
                cache: false,
                async: true,
                type: 'get',
                url: url,
                data: {},
                beforeSend: function () {
                    $('#detalles-modal-body').html('<p class="text-center" style="margin: 50px;"><img src="@Url.Content("~/Images/ajax-loader.gif")" /></p>');
                },
                success: function (vista) {
                    switch (vista) {
                        case "noid":
                            alert('No se recibió un identificador de la persona');
                            $('#detailsModal').modal('hide');
                            $('#detalles-modal-content').html(personaDetailsModalOriginalContent);
                            break;
                        case "nofound":
                            alert('No se encontró la persona solicitada');
                            $('#detailsModal').modal('hide');
                            $('#detalles-modal-content').html(personaDetailsModalOriginalContent);
                            break;
                        default:
                            $('#detalles-modal-content').html(vista);
                            break;
                    }
                },
                error: function (xhr, status, error) {
                    alert('A ocurrido una excepción: ' + error);
                }
            });
    } // getPersonaDetails


        @*function ObtenerNombreCasillaTipo(tipo) {
            var casillaNombre = '';

            switch (tipo) {
                case @((int)CasillaTipo.Basica):
                    casillaNombre = '@Html.Raw(CasillaTipo.Basica.GetDisplayName())';
                    break;
                case @((int)CasillaTipo.Contigua):
                    casillaNombre = '@CasillaTipo.Contigua.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaII):
                    casillaNombre = '@CasillaTipo.ContiguaII.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaIII):
                    casillaNombre = '@CasillaTipo.ContiguaIII.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaIV):
                    casillaNombre = '@CasillaTipo.ContiguaIV.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaV):
                    casillaNombre = '@CasillaTipo.ContiguaV.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaVI):
                    casillaNombre = '@CasillaTipo.ContiguaVI.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaVII):
                    casillaNombre = '@CasillaTipo.ContiguaVII.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaVIII):
                    casillaNombre = '@CasillaTipo.ContiguaVIII.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaIV):
                    casillaNombre = '@CasillaTipo.ContiguaIV.GetDisplayName()';
                    break;
                case @((int)CasillaTipo.ContiguaX):
                    casillaNombre = '@CasillaTipo.ContiguaX.GetDisplayName()';
                    break;
            }

            return casillaNombre;
        } // ObtenerNombreCasillaTipo*@

    </script>
}