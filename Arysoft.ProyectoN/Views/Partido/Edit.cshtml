@model Arysoft.ProyectoN.Models.Partido

@{
    bool esNuevo = Model.Status == StatusTipo.Ninguno;
    string titleSmall = "EDITAR";
    string panelClass = "panel panel-default";
    string panelTitle = Model.Status.ToString();

    string imagePath = string.Empty;

    if (esNuevo)
    {
        ViewBag.Title = "Nuevo partido";
        titleSmall = "NUEVA";
        panelClass = "panel panel-primary";
        panelTitle = "Nuevo registro";
    }
    else
    {
        ViewBag.Title = "Editar partido";
        if (!string.IsNullOrEmpty(Model.ArchivoLogotipo))
        {
            imagePath = Path.Combine("\\Archivos\\Partidos", Model.PartidoID.ToString(), Model.ArchivoLogotipo);
        }
    }

    switch (Model.Status)
    {
        case StatusTipo.Activo:
            panelClass = "panel panel-success";
            panelTitle = "Editar registro";
            break;
        case StatusTipo.Baja:
            panelClass = "panel panel-warning";
            panelTitle = "Registro dado de baja";
            break;
        case StatusTipo.Eliminado:
            panelClass = "panel panel-danger";
            panelTitle = "Registro eliminado";
            break;
    }
}

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>Partido <small>@titleSmall</small></h2>
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-md-offset-2 col-md-8">
            @using (Html.BeginForm("Edit", "Partido", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="@panelClass">
                    <div class="panel-heading">
                        @Html.Raw(panelTitle)
                    </div>
                    <div class="panel-body">
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.PartidoID)
                            @Html.HiddenFor(model => model.Status)
                            @Html.HiddenFor(model => model.UserNameActualizacion)
                            @Html.HiddenFor(model => model.FechaActualizacion)
                            @Html.HiddenFor(model => model.ArchivoLogotipo)

                            <div class="form-group">
                                @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Siglas, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Siglas, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Siglas, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="archivo" class="control-label col-md-2">Logotipo</label>
                                <div class="col-md-10">
                                    <div class="fileinput fileinput-new input-group" data-provides="fileinput">
                                        <div class="form-control" data-trigger="fileinput">
                                            <i class="glyphicon glyphicon-file fileinput-exists"></i>
                                            <span class="fileinput-filename">examinar...</span>
                                        </div>
                                        <span class="input-group-addon btn btn-default btn-file">
                                            <span class="fileinput-new"><span class="glyphicon glyphicon-search" title="Seleccionar archivo"></span></span>
                                            <span class="fileinput-exists"><span class="glyphicon glyphicon-search" title="Cambiar"></span></span>
                                            <input type="file" id="archivo" name="archivo" accept=".jpg, .png" />
                                        </span>
                                        <a href="#" class="input-group-addon btn btn-default fileinput-exists" data-dismiss="fileinput"><span class="glyphicon glyphicon-trash" title="Quitar"></span></a>
                                    </div>
                                    @if (File.Exists(Server.MapPath(imagePath)))
                                    {
                                        <a href="@imagePath" target="_blank" class="col-md-4">
                                            <img src="@imagePath" alt="" class="img-responsive" />
                                        </a>
                                    }
                                    else if (!string.IsNullOrEmpty(Model.ArchivoLogotipo))
                                    {
                                        <span class="text-danger">El archivo del logotipo no se encuentra: @imagePath</span>
                                    }
                                </div>
                            </div>

                            
                        </div>
                    </div>
                    <div class="panel-footer">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-md-6">
                                    <strong>@Html.DisplayNameFor(model => model.UserNameActualizacion)</strong>
                                    @Html.DisplayFor(model => model.UserNameActualizacion)
                                    <br />
                                    <strong>@Html.DisplayNameFor(model => model.FechaActualizacion)</strong>
                                    @Html.DisplayFor(model => model.FechaActualizacion)
                                </div>
                                <div class="col-md-6 text-right">
                                    @Html.Raw(
                                              @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default" }).ToHtmlString()
                                              .Replace("Cancelar", "<span class='glyphicon glyphicon-remove' title='Cancelar cambios'></span> Cancelar")
                                          )
                                    <button type="submit" class="btn btn-primary">
                                        <span class="glyphicon glyphicon-floppy-disk"></span>
                                        Guardar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            
            }
        </div>
    </div>

    
</div>
